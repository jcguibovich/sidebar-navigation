
@function color($catagory, $name, $variant: null, $allowMap: false){
    @return  _get-color($catagory, $name, $variant, $allowMap);
 }
 

@function brand-color($name, $variant: null, $allowMap: false){
   @return  _get-color('brand', $name, $variant, $allowMap);
}

@function neutral-color($name, $variant: null, $allowMap:false){
    @if $variant { @warn 'no variants are available on neutrals. The value of '+ $variant + ' was supplied.' ;} 


    @return  _get-color('neutral',$name, $variant, $allowMap);
 }

@function feedback-color($name, $variant: null,  $allowMap: false){
    @return  _get-color('feedback', $name, $variant, $allowMap); 
}


@function background-color($name, $variant: null, $allowMap: false){
    @return  _get-color('background', $name, $variant, $allowMap); 
}



/// Gets a color from the tokens map. Expected is usage is to use a more specific function which then calls this.
/// Function is specficially built for the nesting of current defined color map.  Switching to seperate nesting will not work currently. 

@function _get-color($catagory, $name, $variant: null, $allowMap: false) {
    $result: null;
    $msg: null;
    $domain: 'color';
    $map: $fk-global-default-token-map;
    $default-tag: 'base';

    // Goes through nested layers very specifically. 
    // If theres an warn we want to be direct in the options available

    @if map-has-key($map, $domain) {
        $result: map-get($map, $domain);
    } @else {
        $msg: "Color map not found, issue with token data. Check under the hood";
        @error $msg;
    };

    

    @if map-has-key($result, $catagory) {
        $result: map-get($result, $catagory )
    } @else {
        $msg: "
            Color catagory `#{$catagory}` not found. Make sure argument is a string.
            Available options: #{map-keys(get('color'))}
        ";
        @error $msg;
    };


    @if map-has-key($result, $name) {
        $result: map-get($result, $name )
    } @else {
        $msg: "
            The color name: `#{$name}` in catagory `#{$catagory}` was not found. Make sure argument is a string.
            Available options: #{map-keys($result)}
        ";
        @error $msg;
    };


    // Some colors just dont have variants
    @if type-of($value: $result) != 'map' {
       @if $variant { @warn 'You listed a variant of `#{$variant}` but color contains no variants. Sending the last value'};
       @return $result;
    }


    @if not $variant {
        @if $allowMap AND type-of($value: $result)=='map' {
            @warn 'no variant supplied, but allow maps is on... sending map';
            @return $result;
        }
        $variant: $default-tag;
    } 

   

    @if map-has-key($result, $variant) {
        $result: map-get($result, $variant );
    } @else {
        $msg: "
            The color name: `#{$name}` with variant: `#{$variant}` in catagory `#{$catagory}` was not found. Make sure argument is a string.
            Available options: #{map-keys($result)}
            NOTE: 'base' options are not required to call, leaving the variant param off will default to base
        ";
        @error $msg;
    }


    @if type-of($result) == 'map' {
        @if $allowMap {
            $msg: "
            Result was a map, $allowMap:true so return map
            ";
            @return $result;
        } @else { 
            $msg: "
              Result was a map, to return a map, you have to explicitly set $allowMap:true in the params
            ";
        
            @warn $msg;
        }
        

    } @else { 
        @return $result;
    }

    @error 'Reached end of color call with no result. Unknwon warn.';
}




  
  
  


