


@mixin type-measure($name) {
    $map: map('type.baseline');

    @if map-has-key($map, $name) {
        line-height: map-get($map, $name);
    } @else {
        @warn '#{$name} is not a valid line-height, options are #{map-keys($map)} ' ;
    }
};



/// Sets a read width limit
///@param name of measure map option
///@type string
@mixin measure($name) { 
    $map: map('type.measure');

    @if map-has-key($map, $name) {
        max-width: map-get($map, $name);
    } @else {
        @warn '#{$name} is not a valid measure, options are #{map-keys($map)} ' ;
    }
}



@function crop-math($line-height: 1.5, $top-adjustment: 0px, $bottom-adjustment: 0px) {
    $top-crop: 10;
    $bottom-crop: 8;
    $crop-font-size: 32;
    $crop-line-height: 1.25;
    @return max(($top-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;
    
}


@mixin text-crop($line-height: 1.3, $top-adjustment: 0px, $bottom-adjustment: 0px) {
    // Configured in Step 1
    $top-crop: 15;
    $bottom-crop: 13;
    $crop-font-size: 32;
    $crop-line-height: 1.5;

    // Apply values to calculate em-based margins that work with any font size
    $dynamic-top-crop: max(($top-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;
    $dynamic-bottom-crop: max(($bottom-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;

    // Mixin output
    line-height: $line-height;

    &::before,
    &::after {
        content: '';
        display: block;
        height: 0;
        width: 0;
    }

    &::before {
        margin-bottom: calc(-#{$dynamic-top-crop}em + #{$top-adjustment});
    }

    &::after {
        margin-top: calc(-#{$dynamic-bottom-crop}em + #{$bottom-adjustment});
    }
}
  
.text-crop {
    @include text-crop();
}