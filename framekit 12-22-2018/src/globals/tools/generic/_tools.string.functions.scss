///@group Generic Functions


/// Split a string by delimiter
///
/// @param {$string} $string - String
/// @param {$delimiter} $delimiter - String *predefined*
///
/// @example
///  str-explode('loan1341235/loan13413243/loan134123', '/')
///

@function str-explode ($string, $delimiter: '') {
    @if type-of($string) != 'string' {
      @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
    }
    @else if type-of($delimiter) != 'string' {
      @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
    }
    $result: ();
    $running: true;
    @if str-length($delimiter) == 0 {
      @for $i from 1 through str-length($string) {
        $result: append($result, str-slice($string, $i, $i));
      }
      @return $result;
    }
    @while $running {
      $index: str-index($string, $delimiter);
      @if $index != null {
        $item: str-slice($string, 1, ($index - 1));
        $result: append($result, $item);
        $string: str-slice($string, ($index + str-length($delimiter)));
      }
      @else {
        $running: false;
      }
    }
    @return append($result, $string);
  }





/// Return input `$string` printed `$n` times
/// @access private
/// @param {String} $string - String to repeat
/// @param {Number} $n - Number of times
/// @return {String}
@function str-multiply($string, $n) {
    $output: '';
  
    @if $n > 0 {
      @for $i from 1 through $n {
        $output: $output + $string;
      }
    }
  
    @return $output;
  }
  
