@mixin button-variant($style-map) {
    $theme: map-get($style-map, 'theme');
    $options: ();
    @if map-has-key($map: $style-map, $key: 'options'){
        $options: map-get($style-map, 'options');
    } @else{
      
    }

    background-color: map-get($theme,'base');
    color: map-get($theme, 'text');
   
    .fk-ucon {
        width:1em;
        height:1em;
        margin-right: .25em; //tktk apply token
    }


   @if map-has-key($options, 'border'){
      border: map-get($options, 'border');
   } @else {
      border-color: transparent;
   }

   &.is-hovered,
   &:hover {
     background-color: map-get($theme, 'dark');
    // box-shadow: $button-default-shadow-hovered;
    // color: map-get($style-map, 'color-hover');
   }
 
   &.is-disabled,
   &:disabled {
    // opacity: $button-opacity-disabled;
     background-color: map-get($theme, 'subtle');
     box-shadow: none;
   }

   &:active,
   &.active,
   &.is-active {
    //background-color: map-get($theme, 'darker');
    //box-shadow:  $bp-layering-elevation-inset
    box-shadow: inset 0px 0px 5px rgba(0, 0, 0, 0.15);
    background-color: map-get($theme, 'darker');
    border:1px solid #ccc;
   }
}

/// Mixin for creating sizes of buttons
@mixin button-size-variant($size-map) {
    @if not map-has-key($map: $size-map, $key: 'font-size' ){
        @error 'button-size-variant mixin called, but font-size not given';
    }

    font-size: map-get($size-map, 'font-size');
    line-height: map-get($size-map, 'font-size');

    @if map-has-key($map: $size-map, $key: 'padding' ){
        padding: map-get($map: $size-map, $key: 'padding' );
    }
}