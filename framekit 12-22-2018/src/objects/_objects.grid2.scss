// Name:            Grid
// Description:     Component to create responsive, fluid and nestable grids
//
// Component:       `fk-grid`
//
// Modifiers:       `fk-grid-small`
//                  `fk-grid-medium`
//                  `fk-grid-large`
//                  `fk-grid-collapse`
//                  `fk-grid-divider`
//                  `fk-grid-match`
//                  `fk-grid-stack`
//                  `fk-grid-margin`
//                  `fk-grid-margin-small`
//                  `fk-grid-margin-medium`
//                  `fk-grid-margin-large`
//                  `fk-grid-margin-collapse`
//
// Sub-modifier:    `fk-grid-item-match`
//
// States:          `fk-first-column`
//
// ========================================================================


// Variables
// ========================================================================





$global-gutter: 30px !default;
$global-large-gutter: 70px !default;
$global-medium-gutter: 40px !default;
$global-small-gutter: 15px !default;
$global-border-width: 1px !default;
$global-border: 1px solid #333;
$inverse-global-border: !default;


$grid-gutter-horizontal:                         $global-gutter !default;
$grid-gutter-vertical:                           $grid-gutter-horizontal !default;
$grid-gutter-horizontal-l:                       $global-medium-gutter !default;
$grid-gutter-vertical-l:                         $grid-gutter-horizontal-l !default;

$grid-small-gutter-horizontal:                   $global-small-gutter !default;
$grid-small-gutter-vertical:                     $grid-small-gutter-horizontal !default;

$grid-medium-gutter-horizontal:                  $global-gutter !default;
$grid-medium-gutter-vertical:                    $grid-medium-gutter-horizontal !default;

$grid-large-gutter-horizontal:                   $global-medium-gutter !default;
$grid-large-gutter-vertical:                     $grid-large-gutter-horizontal !default;
$grid-large-gutter-horizontal-l:                 $global-large-gutter !default;
$grid-large-gutter-vertical-l:                   $grid-large-gutter-horizontal-l !default;

$grid-divider-border-width:                      $global-border-width !default;
$grid-divider-border:                            $global-border !default;


/* ========================================================================
   Component: Grid
 ========================================================================== */

/*
 * 1. Allow cells to wrap into the next line
 * 2. Reset list
 */

.fk-grid {
    display: flex;
    /* 1 */
    flex-wrap: wrap;
    /* 2 */
    margin: 0;
    padding: 0;
    list-style: none;
}

/*
 * Grid cell
 * Note: Space is allocated solely based on content dimensions, but shrinks: 0 1 auto
 * Reset margin for e.g. paragraphs
 */

.fk-grid > * { margin: 0; }

/*
 * Remove margin from the last-child
 */

.fk-grid > * > :last-child { margin-bottom: 0; }


/* Gutter
 ========================================================================== */

/*
 * Default
 */

/* Horizontal */
.fk-grid { margin-left: (-$grid-gutter-horizontal); }
.fk-grid > * { padding-left: $grid-gutter-horizontal; }

/* Vertical */
.fk-grid + .fk-grid,
.fk-grid > .fk-grid-margin,
* + .fk-grid-margin { margin-top: $grid-gutter-vertical; }

/* Desktop and bigger */
@media (min-width: get-breakpoint('lg')) {

    /* Horizontal */
    .fk-grid { margin-left: (-$grid-gutter-horizontal-l); }
    .fk-grid > * { padding-left: $grid-gutter-horizontal-l; }

    /* Vertical */
    .fk-grid + .fk-grid,
    .fk-grid > .fk-grid-margin,
    * + .fk-grid-margin { margin-top: $grid-gutter-vertical-l; }

}

/*
 * Small
 */

/* Horizontal */
.fk-grid-small { margin-left: (-$grid-small-gutter-horizontal); }
.fk-grid-small > * { padding-left: $grid-small-gutter-horizontal; }

/* Vertical */
.fk-grid + .fk-grid-small,
.fk-grid-small > .fk-grid-margin,
* + .fk-grid-margin-small { margin-top: $grid-small-gutter-vertical; }

/*
 * Medium
 */

/* Horizontal */
.fk-grid-medium { margin-left: (-$grid-medium-gutter-horizontal); }
.fk-grid-medium > * { padding-left: $grid-medium-gutter-horizontal; }

/* Vertical */
.fk-grid + .fk-grid-medium,
.fk-grid-medium > .fk-grid-margin,
* + .fk-grid-margin-medium { margin-top: $grid-medium-gutter-vertical; }

/*
 * Large
 */

/* Horizontal */
.fk-grid-large { margin-left: (-$grid-large-gutter-horizontal); }
.fk-grid-large > * { padding-left: $grid-large-gutter-horizontal; }

/* Vertical */
.fk-grid + .fk-grid-large,
.fk-grid-large > .fk-grid-margin,
* + .fk-grid-margin-large { margin-top: $grid-large-gutter-vertical; }

/* Desktop and bigger */
@media (min-width: get-breakpoint('lg')) {

    /* Horizontal */
    .fk-grid-large { margin-left: (-$grid-large-gutter-horizontal-l); }
    .fk-grid-large > * { padding-left: $grid-large-gutter-horizontal-l; }

    /* Vertical */
    .fk-grid + .fk-grid-large,
    .fk-grid-large > .fk-grid-margin,
    * + .fk-grid-margin-large { margin-top: $grid-large-gutter-vertical-l; }

}

/*
 * Collapse
 */

/* Horizontal */
.fk-grid-collapse { margin-left: 0; }
.fk-grid-collapse > * { padding-left: 0; }

/* Vertical */
.fk-grid + .fk-grid-collapse,
.fk-grid-collapse > .fk-grid-margin { margin-top: 0; }


/* Divider
 ========================================================================== */

.fk-grid-divider > * { position: relative; }

.fk-grid-divider > :not(.fk-first-column)::before {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    border-left: $grid-divider-border-width solid $grid-divider-border;
}

/* Vertical */
.fk-grid-divider.fk-grid-stack > .fk-grid-margin::before {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    border-top: $grid-divider-border-width solid $grid-divider-border;
}

/*
 * Default
 */

/* Horizontal */
.fk-grid-divider { margin-left: -($grid-gutter-horizontal * 2); }
.fk-grid-divider > * { padding-left: ($grid-gutter-horizontal * 2); }

.fk-grid-divider > :not(.fk-first-column)::before { left: $grid-gutter-horizontal; }

/* Vertical */
.fk-grid-divider.fk-grid-stack > .fk-grid-margin { margin-top: ($grid-gutter-vertical * 2); }

.fk-grid-divider.fk-grid-stack > .fk-grid-margin::before {
    top: (-$grid-gutter-vertical);
    left: ($grid-gutter-horizontal * 2);
}

/* Desktop and bigger */
@media (min-width: get-breakpoint('lg')) {

    /* Horizontal */
    .fk-grid-divider { margin-left: -($grid-gutter-horizontal-l * 2); }
    .fk-grid-divider > * { padding-left: ($grid-gutter-horizontal-l * 2); }

    .fk-grid-divider > :not(.fk-first-column)::before { left: $grid-gutter-horizontal-l; }

    /* Vertical */
    .fk-grid-divider.fk-grid-stack > .fk-grid-margin { margin-top: ($grid-gutter-vertical-l * 2); }

    .fk-grid-divider.fk-grid-stack > .fk-grid-margin::before {
        top: (-$grid-gutter-vertical-l);
        left: ($grid-gutter-horizontal-l * 2);
    }

}

/*
 * Small
 */

/* Horizontal */
.fk-grid-divider.fk-grid-small { margin-left: -($grid-small-gutter-horizontal * 2); }
.fk-grid-divider.fk-grid-small > * { padding-left: ($grid-small-gutter-horizontal * 2); }

.fk-grid-divider.fk-grid-small > :not(.fk-first-column)::before { left: $grid-small-gutter-horizontal; }

/* Vertical */
.fk-grid-divider.fk-grid-small.fk-grid-stack > .fk-grid-margin { margin-top: ($grid-small-gutter-vertical * 2); }

.fk-grid-divider.fk-grid-small.fk-grid-stack > .fk-grid-margin::before {
    top: (-$grid-small-gutter-vertical);
    left: ($grid-small-gutter-horizontal * 2);
}

/*
 * Medium
 */

/* Horizontal */
.fk-grid-divider.fk-grid-medium { margin-left: -($grid-medium-gutter-horizontal * 2); }
.fk-grid-divider.fk-grid-medium > * { padding-left: ($grid-medium-gutter-horizontal * 2); }

.fk-grid-divider.fk-grid-medium > :not(.fk-first-column)::before { left: $grid-medium-gutter-horizontal; }

/* Vertical */
.fk-grid-divider.fk-grid-medium.fk-grid-stack > .fk-grid-margin { margin-top: ($grid-medium-gutter-vertical * 2); }

.fk-grid-divider.fk-grid-medium.fk-grid-stack > .fk-grid-margin::before {
    top: (-$grid-medium-gutter-vertical);
    left: ($grid-medium-gutter-horizontal * 2);
}

/*
 * Large
 */

/* Horizontal */
.fk-grid-divider.fk-grid-large { margin-left: -($grid-large-gutter-horizontal * 2); }
.fk-grid-divider.fk-grid-large > * { padding-left: ($grid-large-gutter-horizontal * 2); }

.fk-grid-divider.fk-grid-large > :not(.fk-first-column)::before { left: $grid-large-gutter-horizontal; }

/* Vertical */
.fk-grid-divider.fk-grid-large.fk-grid-stack > .fk-grid-margin { margin-top: ($grid-large-gutter-vertical * 2); }

.fk-grid-divider.fk-grid-large.fk-grid-stack > .fk-grid-margin::before {
    top: (-$grid-large-gutter-vertical);
    left: ($grid-large-gutter-horizontal * 2);
}

/* Desktop and bigger */
@media (min-width: get-breakpoint('lg')) {

    /* Horizontal */
    .fk-grid-divider.fk-grid-large { margin-left: -($grid-large-gutter-horizontal-l * 2); }
    .fk-grid-divider.fk-grid-large > * { padding-left: ($grid-large-gutter-horizontal-l * 2); }

    .fk-grid-divider.fk-grid-large > :not(.fk-first-column)::before { left: $grid-large-gutter-horizontal-l; }

    /* Vertical */
    .fk-grid-divider.fk-grid-large.fk-grid-stack > .fk-grid-margin { margin-top: ($grid-large-gutter-vertical-l * 2); }

    .fk-grid-divider.fk-grid-large.fk-grid-stack > .fk-grid-margin::before {
        top: (-$grid-large-gutter-vertical-l);
        left: ($grid-large-gutter-horizontal-l * 2);
    }

}


/* Match child of a grid cell
 ========================================================================== */

/*
 * Behave like a block element
 * 1. Wrap into the next line
 * 2. Take the full width, at least 100%. Only if no class from the Width component is set.
 * 3. Expand width even if larger than 100%, e.g. because of negative margin (Needed for nested grids)
 */

.fk-grid-match > *,
.fk-grid-item-match {
    display: flex;
    /* 1 */
    flex-wrap: wrap;
}

.fk-grid-match > * > :not([class*='fk-width']),
.fk-grid-item-match > :not([class*='fk-width']) {
    /* 2 */
    box-sizing: border-box;
    width: 100%;
    /* 3 */
    flex: auto;
}

