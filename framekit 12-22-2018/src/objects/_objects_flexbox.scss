//LOTS of this will need to be cleaned up




//.uk-flex	Create the flex container and behave like a block element.
//.uk-flex-inline	Create the flex container and behave like an inline element.

// MEDIA QUERIES FOR REFERENCE
// @include mq-xs {
//   margin-left: 16px;
//   margin-right: 16px;
// }

// @include mq-sm {
//   margin-left: 32px;
//   margin-right: 32px;
// }

// @include mq-md {
//   max-width: get-breakpoint('md') - ($page-padding * 2);
// }

// @include mq-lg {
//   max-width: get-breakpoint('lg')-($page-padding * 2);
// }

// @include mq-xl {
//   max-width: get-breakpoint('xl')-($page-padding * 2);

.l-flex {
  display: flex;
}

.l-flex-wrap {
  display: flex;
  flex-wrap: wrap;
}
// .l-flexbox{
//   display: flex;
//   flex-wrap: wrap;
//   margin: 0;
//   padding: 0;
//   list-style: none;
//   &--flex-none {
//     flex: none;
//   }
//   &-orderminus1 {
//     order: -1;
//   }
  //tktktkt Matthew
  // @include mq-from-lg(){
  //   property: someproperty;
  // }
// }

//TKTKTK ONLY FOR TESTING PURPOSES
.l-flexbox-width-1-3 {
  width: calc(100% * 1 / 3.001); //TKTKTK MATTHEW not sure this works in IE 10
}
.l-flexbox-width-expand {

}
.l-flexbox-order--minus1 {
  order: -1;
}
.l-flexbox-order--1 {
  order: 1;
}
.l-flexbox-order--2 {
  order: 2;
}
.l-flexbox-order--3 {
  order: 3;
}
.l-flexbox-order--4 {
  order: 4;
}
.l-flexbox-order--5 {
  order: 5;
}
.l-flexbox-order--last {
  order: 99;
}

.l-flexbox-child__width-100 {
  box-sizing: border-box;
  width: 100%;
}

//uk-child-width-1-2@s uk-child-width-1-3@m uk-grid uk-flex-top uk-flex-wrap-top
// VERTICAL
$flexalign: flex-start;

@mixin _flexAlignCreator ($flexalign...) {
  @each $flexalign in $flexalign {
    .l-flexbox-flexalign--#{$flexalign} {
      align-content: $flexalign;
    }
  }

}
@include _flexAlignCreator(flex-start,center, flex-end, space-between, space-around, stretch);


// HORIZONTAL
$justify: flex-start;

@mixin _flexJustifyCreator ($justify...) {
  @each $justify in $justify {
    .l-flexbox-flexjustify--#{$justify} {
      justify-content: $justify;
    }
  }
}
@include _flexJustifyCreator(flex-start,center, flex-end, space-between, space-around);
@include _flexJustifyCreator (space-evenly); //WHY DOESN'T THIS SHOW IN VSCODE AS SYNTACTICALLY CORRECT?


//FLEX DIRECTION
$direction: row;

@mixin _flexDirectionCreator ($direction...) {
  @each $direction in $direction {
    .l-flexbox-flexdirection--#{$direction} {
      flex-direction: $direction;
    }
  }
}
@include _flexDirectionCreator (row, row-reverse, column, column-reverse);



.l-flexbox-flexwrap--nowrap {
  flex-wrap: nowrap;
}
.l-flexbox-flexwrap--wrap {
  flex-wrap: wrap;
}
.l-flexbox-flexwrap--wrap-reverse {
  flex-wrap: wrap-reverse;
}
 
.l-flexbox-flex--none {
  flex: none;
}
.l-flexbox-flex--auto {
  flex: auto;
}
.l-flexbox-flex--1 {
  flex: 1;
}


.l-flexbox-flexup {
  box-sizing: border-box;
  width: 100%;
  display: flex;
  flex-wrap: wrap;
}
[class*='l-flexbox-flexup'] > * {
  box-sizing: border-box;
  width: 100%;
}
.l-flexbox-flexup-2up > * {
  
  width: 50%;
}
.l-flexbox-flexup-3up > * {
  width: calc(100% * 1 / 3.001);
}
.l-flexbox-flexup-4up > * {
  width: 25%;
}
.l-flexbox-flexup-5up > * {
  width: 20%;
}

.l-flexbox-flexup-6up > * {
  width: calc(100% * 1 / 6.001);
}
// .l-flexbox-flexup-auto > * {
//   width: auto;
// }



/*
   flex-direction: row;
   flex-wrap: wrap;
    Or do it all in one line
     with flex flow 
     flex-flow: row wrap;
    */

    // flex-flow: column wrap;

// do flex to match height in different ways


// .uk-width-auto	The item expands only to the width of its own content.
// .uk-width-expand	The item expands to fill up the remaining space of the grid container.


//.uk-offcanvas-bar	Add this class to a child <div> element.
// .uk-offcanvas-content	Wrap your page's content inside a <div> element and add this class.
// .uk-offcanvas-close	Add this class and the uk-close attribute to an <a> or <button> element to create a close button and enable its functionality.


// .uk-width-small	Applies a fixed width of 150px.
// .uk-width-medium	Applies a fixed width of 300px.
// .uk-width-large	Applies a fixed width of 450px.
// .uk-width-xlarge	Applies a fixed width of 600px.
// .uk-width-xxlarge	Applies a fixed width of 750px.


// I don't like the way this works 
// .uk-width-*
// .uk-child-width-*	Affects all device widths, grid columns stay side by side.
// .uk-width-*@s
// .uk-child-width-*@s	Affects device widths of 640px and larger. Grid columns will stack on smaller sizes.
// .uk-width-*@m
// .uk-child-width-*@m	Affects device widths of 960px and larger. Grid columns will stack on smaller sizes.
// .uk-width-*@l
// .uk-child-width-*@l	Affects device widths of 1200px and larger. Grid columns will stack on smaller sizes.
// .uk-width-*@xl
// .uk-child-width-*@xl	Affects device widths of 1600px and larger. Grid columns will stack on smaller sizes.

//CHECKS TO SEE IF GRID CAN BE USED BUT APPLIES THE CODE TO THE SCSS BLOCK
// @supports not (display: grid) {
//   height:100px;
//   width:calc(50% - 10px);
//   margin:10px; 
//   display:block;
// }


.fk-frame-mismatched {
  align-items: stretch;
  display: block;
  flex-basis: 0;
  flex-grow: 1;
  flex-shrink: 1;
  min-height: -webkit-min-content;
  min-height: -moz-min-content;
  min-height: min-content;
}





/* column width creator */
$width: 100;

@mixin _columnWidthNamer ($width) {
//@error $width;
$val: '#{$width}%';
  .l-flexbox-column-w--#{$width} {
    flex: none;
    width: unquote($val);
  }
}

@include _columnWidthNamer (100);
@include _columnWidthNamer (90);
@include _columnWidthNamer (80);
@include _columnWidthNamer (75);
@include _columnWidthNamer (70);
@include _columnWidthNamer (60);
@include _columnWidthNamer (50);
@include _columnWidthNamer (40);
@include _columnWidthNamer (30);
@include _columnWidthNamer (25);
@include _columnWidthNamer (20);
@include _columnWidthNamer (10);
// @include _columnWidthNamer ();


.l-flexbox-column-multiline {
  flex-wrap: wrap;
}
.l-flexbox-column-w--33 {
  flex: none;
  width: 33.3333%;
}
.l-flexbox-column-w--66 {
  flex: none;
  width: 66.6666%;
}


.l-hg-l {
  display: flex;
  height: 100vh;
  flex-direction: column;
  header, footer {
    flex: none;
    /* 2 */
  }
}

.l-hg-l-container {
  display: flex;
  flex: 1 0 auto;
  /* 2 */
  flex-direction: column;
  padding: var(--space);
}

.l-hg-l-content {
  /* tktktk Matthew IE may not work for Var */
  margin-top: var(--space);
}

.l-hg-l {
  nav, aside {
    padding: 1em;
    border-radius: 3px;
  }
}

@media (min-width: 768px) {
  .l-hg-l-container{
      flex-direction: row;
  }
  .l-hg-l-content{
  flex: 1;
  padding: 0 var(--space-lg);
  margin: 0;
  }
  .l-hg-l nav, .l-hg-l aside {
  flex: 0 0 12em;
  }
}


//card-group


.column, .l-1a-l-column {
  display: flex;
  flow-direction: column;
  width: 100%;
  height: 100%;
}
.sidebar, .l-1a-l-sidebar{
  flex-shrink: 0;
  /* background-color: #eee; */
  overflow-x: hidden;
}
.sidebar:not(.cover), .l-1a-l-sidbar:not(.l-1a-l-cover) {
  width: 0;
  transition: width 0.4s ease-in;
}
.sidebar:not(.cover).open, .l-1a-l-sidebar:not(.l-1a-l-cover).l-1a-l-open {
  width: 250px;
  transition: width 0.4s ease-out;
}
.sidebar.cover, .l-1a-l-sidebar.l-1a-l-cover {
  width: 250px;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  margin-left: -250px;
  transition: margin 0.4s ease-in;
}
.sidebar.cover.open, .l-1a-l-sidebar.l-1a-l-cover.l-1a-l-open{
  margin-left: 0;
  transition: margin 0.4s ease-out;
}

.content, .l-1a-l-content {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
}
.main, .l-1a-l-main {
  padding: 20px;
}
.row, .l-1a-l-row {
  display: flex;
  flex-direction: row;
}
.column, .l-1a-l-column{
  display: flex;
  flex-direction: column;
}
.l-1a-l-footer {
    display: flex;
    flex-direction: row;
    flex-basis: 100%;
}



//1b

.l-1b-l {
  flex-direction: column;
  flex-wrap: wrap;
  height: 16em;
  flex-basis: 20%;
 }
 
 .l-1b-l sidebar {
  width: 20%;
  flex-basis: 100%;
 }
 
 .l-1b-l main{
     flex-basis: 20%;
     width: 60%;
     flex-grow: 1;
 }
 
 
 .l-1b-l nav {
     flex-basis: 20%;
     width: 60%;
 }
 
 .l-1b-l footer {
     flex-direction: row;
 }
 
 
 .l-1b-l aside {
     flex-basis: 100%;
     width: 20%;
 }



 /* 1 column layout *

 /* Horizontal Nav in here */

.horizontalNav {
  display: block;
 }
 .horizontalNav nav {
  display: block;
 }
 .horizontalNav ul {
  display: flex;
  justify-content: space-between;
  list-style: none;
  padding-left: 0;
  /* background-color: rgba(0,0,0,0.1); */
 }
 .horizontalNav li {
  flex-basis: auto;
  padding-right: 20px; /* do not use */
 }
 .horizontalNav a {
  text-decoration: none;
  padding: 0.5em 1em;
  background-color: rgba(0,0,0,0.3);
  color: #fff;
  display: block;
 }
 
 .l-1col-l {    
  flex-direction: column;
  flex-wrap: nowwrap;
 }
  

 /* tiles */

 .l-tiles-l-columns {
	column-width: 320px;
	column-gap: 15px;
  width: 90%;
	max-width: 1100px;
	margin: 50px auto;
}

.l-tiles-l-columns card {
	background: #fefefe;
	border: 2px solid #fcfcfc;
	box-shadow: 0 1px 2px rgba(34, 25, 25, 0.4);
	margin: 0 2px 15px;
	padding: 15px;
	padding-bottom: 10px;
	transition: opacity .4s ease-in-out;
  display: inline-block;
  column-break-inside: avoid;
}

.l-tiles-l-columns card img {
	width: 100%; height: auto;
	border-bottom: 1px solid #ccc;
	padding-bottom: 15px;
	margin-bottom: 5px;
}

.l-tiles-l-columns card cardcaption {
  font-size: .9rem;
	color: #444;
  line-height: 1.5;
}

.l-tiles-l-columns small { 
  font-size: 1rem;
  float: right; 
  text-transform: uppercase;
  color: #aaa;
} 

.l-tiles-l-columns small a { 
  color: #666; 
  text-decoration: none; 
  transition: .4s color;
}

.l-tiles-l-columns:hover card:not(:hover) {
	opacity: 0.4;
}

@media screen and (max-width: 750px) { 
  #l-tiles-l-columns { column-gap: 0px; }
  #l-tiles-l-columns card { width: 100%; }
}

//.tiles
//.1col
//HG
//.1b
// .1a