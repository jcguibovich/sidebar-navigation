/*
spacer
*/

$fk-utils-spacer-responsive: true !default;
$fk-utils-spacer-print: true !default;

$fk-utils-spacer-breakpoints: map('web.breakpoints') !default;

$fk-utils-spacer-ns: 'spacer' !default; 

$fk-utils-spacer-sm-height: $bp-module-scale-down-2;
$fk-utils-spacer-default-height: $fk-global-baseline;
$fk-utils-spacer-lg-height: $fk-global-baseline * 2;
$fk-utils-spacer-xl-height: $fk-global-baseline * 4;

//Private function to include through looks and conditional statements
@mixin _spacer($variant:'') {
  .#{$fk-ns-utilities + $fk-utils-spacer-ns}#{$variant}{
        height: #{$fk-utils-spacer-default-height}rem;
        visibility: hidden;

        &--sm{
            height:#{$fk-utils-spacer-sm-height}rem;
            visibility: hidden; // safety net just in case dont use parent
        }

        &--lg{
            height:#{$fk-utils-spacer-lg-height}rem;
            visibility: hidden; // safety net just in case dont use parent
        }

        &--xl{
            height:#{$fk-utils-spacer-xl-height}rem;
            visibility: hidden; // safety net just in case dont use parent
        }

  }

}


@if($fk-config-enable-utilties){
 @include _spacer();
}

@if $fk-utils-spacer-print AND $fk-config-enable-print {
 @media print {
     @include _spacer($fk-ns-breakpoint-separator + $fk-ns-print);
 }
}

@if ($fk-utils-spacer-responsive AND $fk-config-enable-responsive) {
 @each $breakpoint-name, $breakpoint-size in $fk-utils-spacer-breakpoints {
     @include mq-only($breakpoint-name){
      //   @include _spacer($fk-ns-breakpoint-separator + $breakpoint-name);
     }
 }
} 
