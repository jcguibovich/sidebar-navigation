// ====== PACK & DEPLOY TO PRODUCTION ====================== //

gulp.task('packDeploy', () => {
  $$.runSequence('compress', 'deploy')
})

// compress docs
gulp.task('compress', () => {
  return gulp.src('docs/**/*')
    .pipe($.zip('docs.zip'))
    .pipe(gulp.dest('built'))
})

gulp.task('compile:deploy', callback => {
  runSequence('includer', 'deploy', callback)
})


// deploy compressed docs
gulp.task('deploy', function () {
  return gulp.src('docs/1.0/**/*.*')
    .pipe(rsync({
      root: 'docs/1.0',
      hostname: 'smb://dwv-flk-w003',
      destination: '/heathscript.fanniemae.com/wwwroot',
      recursive: true,
      archive: false,
      silent: false,
      compress: false
    }))
}) // rsync -rvz --chmod=ugo=rwX -e ssh source destination

// deploy uncompressed docs
gulp.task('deploy1', function () {
  return gulp.src('docs/1.0/**/*.*')
    .pipe(rsync({
      root: 'docs',
      hostname: 'smb://musicman1/www',
      destination: '/'
    }))
})

// deploy via ftp
var ftp = require('vinyl-ftp')

gulp.task('deploy:ftp', function () {

  var conn = ftp.create({
    host: 'heathesis.com',
    user: 'fm-heath',
    password: 'HK3134Ever',
    parallel: 10,
    log: gutil.log
  })

  var globs = [
    'src/**',
    'css/**',
    'js/**',
    'fonts/**',
    'index.html'
  ]

  // using base = '.' will transfer everything to /public_html correctly
  // turn off buffering in gulp.src for best performance

  return gulp.src(globs, {
    base: '/docs/1.0/',
    buffer: false
  })
    .pipe(conn.newer('/docs/1.0/**/*')) // only upload newer files
    .pipe(conn.dest('/public_html'))

})
